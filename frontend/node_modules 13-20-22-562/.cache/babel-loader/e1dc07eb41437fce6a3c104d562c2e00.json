{"ast":null,"code":"\"use strict\";\n\nvar defaults = {\n  ellipse: \"…\",\n  chars: [\" \", \"-\"],\n  max: 140,\n  truncate: true\n};\n/**\n * \"mac-style\" or \"harmonica\" ellipsize.\n * Ellipsizes a string in the middle instead of the end.\n *\n * Examples:\n *\n *      These are a few of my favourite things\n *      These are … my faourite things\n *      These are … faourite things\n *      hese … things\n *\n * @param {string} str\n * @param {Number} max\n * @param {string} ellipse\n * @param {string[]} chars\n * @returns {string} ellipsized\n */\n\nfunction ellipsizeMiddle(str, max, ellipse, chars) {\n  if (str <= max) return str;\n  if (max < 2) return str.slice(0, max - ellipse.length) + ellipse;\n  var maxLen = max - ellipse.length;\n  var middle = Math.floor(maxLen / 2);\n  var left = middle;\n  var right = str.length - middle;\n\n  for (var i = 0; i < middle; i++) {\n    var charLeft = str.charAt(i);\n    var posRight = str.length - i;\n    var charRight = str.charAt(posRight);\n    if (chars.indexOf(charLeft) !== -1) left = i;\n    if (chars.indexOf(charRight) !== -1) right = posRight;\n  }\n\n  return str.slice(0, left) + ellipse + str.slice(right);\n}\n/**\n *\n * @param {string} str\n * @param {number} max\n * @param {string} ellipse\n * @param {string[]} chars\n * @param {boolean} truncate\n * @returns\n */\n\n\nfunction ellipsize(str, max, ellipse, chars, truncate) {\n  if (str.length <= max) return str;\n  var maxLen = max - ellipse.length;\n  var end = maxLen;\n\n  for (var i = 0; i <= maxLen; i++) {\n    var char = str.charAt(i);\n    if (chars.indexOf(char) !== -1) end = i;\n  } // no breakpoint found, but truncate\n  // was not allowed.\n\n\n  if (!truncate && end == maxLen) return \"\";\n  return str.slice(0, end) + ellipse;\n}\n/**\n * Ellipsize a string. Produces a string that is max lenght,\n * including the ellipse character.\n *\n * @param {string} str - String to ellipsize\n * @param {number} max - Max length including ellipsis\n * @param {Record<string, any>} [opts] - See additional options\n * @returns {string} ellipsized string\n */\n\n\nmodule.exports = function (str, max, opts) {\n  if (typeof str !== \"string\" || str.length === 0) return \"\";\n  if (max === 0) return \"\";\n  opts = opts || {};\n\n  for (var key in defaults) {\n    if (opts[key] === null || typeof opts[key] === \"undefined\") {\n      opts[key] = defaults[key];\n    }\n  }\n\n  opts.max = max || opts.max;\n  if (opts.truncate == \"middle\") return ellipsizeMiddle(str, opts.max, opts.ellipse, opts.chars);\n  return ellipsize(str, opts.max, opts.ellipse, opts.chars, opts.truncate);\n};\n\nmodule.exports.ellipsizeMiddle = ellipsizeMiddle;\nmodule.exports.ellipsize = ellipsize;","map":{"version":3,"sources":["/Users/gilbertvirgo/chl-v2/frontend/node_modules/ellipsize/src/index.js"],"names":["defaults","ellipse","chars","max","truncate","ellipsizeMiddle","str","slice","length","maxLen","middle","Math","floor","left","right","i","charLeft","charAt","posRight","charRight","indexOf","ellipsize","end","char","module","exports","opts","key"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar defaults = {\n    ellipse: \"…\",\n    chars: [\" \", \"-\"],\n    max: 140,\n    truncate: true,\n};\n\n/**\n * \"mac-style\" or \"harmonica\" ellipsize.\n * Ellipsizes a string in the middle instead of the end.\n *\n * Examples:\n *\n *      These are a few of my favourite things\n *      These are … my faourite things\n *      These are … faourite things\n *      hese … things\n *\n * @param {string} str\n * @param {Number} max\n * @param {string} ellipse\n * @param {string[]} chars\n * @returns {string} ellipsized\n */\n\nfunction ellipsizeMiddle(str, max, ellipse, chars) {\n    if (str <= max) return str;\n    if (max < 2) return str.slice(0, max - ellipse.length) + ellipse;\n\n    var maxLen = max - ellipse.length;\n    var middle = Math.floor(maxLen / 2);\n\n    var left = middle;\n    var right = str.length - middle;\n\n    for (var i = 0; i < middle; i++) {\n        var charLeft = str.charAt(i);\n        var posRight = str.length - i;\n\n        var charRight = str.charAt(posRight);\n\n        if (chars.indexOf(charLeft) !== -1) left = i;\n        if (chars.indexOf(charRight) !== -1) right = posRight;\n    }\n\n    return str.slice(0, left) + ellipse + str.slice(right);\n}\n\n/**\n *\n * @param {string} str\n * @param {number} max\n * @param {string} ellipse\n * @param {string[]} chars\n * @param {boolean} truncate\n * @returns\n */\nfunction ellipsize(str, max, ellipse, chars, truncate) {\n    if (str.length <= max) return str;\n\n    var maxLen = max - ellipse.length;\n    var end = maxLen;\n\n    for (var i = 0; i <= maxLen; i++) {\n        var char = str.charAt(i);\n        if (chars.indexOf(char) !== -1) end = i;\n    }\n\n    // no breakpoint found, but truncate\n    // was not allowed.\n    if (!truncate && end == maxLen) return \"\";\n\n    return str.slice(0, end) + ellipse;\n}\n\n/**\n * Ellipsize a string. Produces a string that is max lenght,\n * including the ellipse character.\n *\n * @param {string} str - String to ellipsize\n * @param {number} max - Max length including ellipsis\n * @param {Record<string, any>} [opts] - See additional options\n * @returns {string} ellipsized string\n */\nmodule.exports = function (str, max, opts) {\n    if (typeof str !== \"string\" || str.length === 0) return \"\";\n    if (max === 0) return \"\";\n\n    opts = opts || {};\n\n    for (var key in defaults) {\n        if (opts[key] === null || typeof opts[key] === \"undefined\") {\n            opts[key] = defaults[key];\n        }\n    }\n\n    opts.max = max || opts.max;\n\n    if (opts.truncate == \"middle\")\n        return ellipsizeMiddle(str, opts.max, opts.ellipse, opts.chars);\n\n    return ellipsize(str, opts.max, opts.ellipse, opts.chars, opts.truncate);\n};\n\nmodule.exports.ellipsizeMiddle = ellipsizeMiddle;\nmodule.exports.ellipsize = ellipsize;\n"]},"metadata":{},"sourceType":"script"}